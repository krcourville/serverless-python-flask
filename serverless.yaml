service: serverless-flask

plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-warmup
  - serverless-wsgi

custom:
  warmup:
    enabled: true
    prewarm: true
    concurrency: 1
  tableName: 'users-table-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    stages:
      - dev
    start:
      migrate: true

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"]}
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function:${self:service}-${opt:stage, self:provider.stage}-*

  environment:
    USERS_TABLE: ${self:custom.tableName}
  vpc:
    securityGroupIds:
      - 'sg-24115e59'
    subnetIds:
      - 'subnet-8d676cb0'
      - 'subnet-1937dd50'
      - 'subnet-44e3d96e'

functions:
#  auth:
#    handler: auth_handler.handle
#    cors: true

  getUser:
    handler: wsgi_handler.handler
    events:
      - http:
          path: '/users/{proxy+}'
          method: GET
          cors: true
          authorizer: auth

  createUser:
#    handler: wsgi_handler.handler
    events:
      - http:
          path: '/users'
          cors: true
          method: POST
          authorizer: auth

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'